"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.analyzeProjectCommand = void 0;
const nanospinner_1 = require("nanospinner");
const configLoader_1 = require("../utils/configLoader");
const logger_1 = require("../utils/logger");
const projectAnalyzer_1 = require("../utils/projectAnalyzer");
const analyzeProjectCommand = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const spinner = (0, nanospinner_1.createSpinner)("Analyzing project...").start();
    try {
        const config = (0, configLoader_1.loadConfig)();
        // Analiz yap
        const stats = yield (0, projectAnalyzer_1.analyzeProject)(config, options);
        if (options.json) {
            // JSON formatında çıktı - HTML ile tutarlı hale getir
            const enhancedStats = Object.assign(Object.assign({}, stats), { metadata: {
                    generatedAt: new Date().toISOString(),
                    tool: "Kedy CLI",
                    version: "1.0.0",
                    disclaimer: "This report was generated by Kedy CLI tool. Analysis results may contain errors or inaccuracies. Use at your own risk.",
                }, summary: {
                    projectOverview: {
                        totalFiles: stats.totalFiles,
                        totalLines: stats.totalLines,
                        totalSizeKB: (stats.totalSize / 1024).toFixed(2),
                    },
                    fileDistribution: {
                        screens: stats.screens.length,
                        components: stats.components.length,
                        hooks: stats.hooks.length,
                        utils: stats.utils.length,
                        others: stats.others.length,
                    },
                    codeQuality: {
                        highComplexityComponents: stats.components.filter((f) => f.complexity > 10).length,
                        largeScreens: stats.screens.filter((f) => f.lines > 200).length,
                        unusedCodePercentage: ((stats.unusedFiles.length / stats.totalFiles) *
                            100).toFixed(1),
                    },
                }, projectStructure: generateProjectStructure(stats) });
            console.log(JSON.stringify(enhancedStats, null, 2));
            spinner.success({ text: "Project analysis completed!" });
            return;
        }
        if (options.html) {
            // HTML raporu oluştur (basit versiyon)
            generateHTMLReport(stats);
            spinner.success({ text: "HTML report generated!" });
            return;
        }
        // Konsol raporu
        displayConsoleReport(stats, options);
        spinner.success({ text: "Project analysis completed!" });
    }
    catch (error) {
        spinner.error({ text: `Failed to analyze project: ${error.message}` });
        logger_1.logger.error(error);
    }
});
exports.analyzeProjectCommand = analyzeProjectCommand;
// Konsol raporu göster
const displayConsoleReport = (stats, options) => {
    console.log("\n📊 Project Analysis Report");
    console.log("=".repeat(50));
    // Proje genel bakış
    console.log("\n🏗️  Project Overview:");
    console.log(`   📁 Total files: ${stats.totalFiles}`);
    console.log(`   📝 Total lines: ${stats.totalLines.toLocaleString()}`);
    console.log(`   💾 Total size: ${(stats.totalSize / 1024).toFixed(2)} KB`);
    // Kategorilere göre dağılım
    console.log("\n📂 File Distribution:");
    console.log(`   📱 Screens: ${stats.screens.length}`);
    console.log(`   🧩 Components: ${stats.components.length}`);
    console.log(`   🪝 Hooks: ${stats.hooks.length}`);
    console.log(`   🛠️  Utils: ${stats.utils.length}`);
    console.log(`   📄 Others: ${stats.others.length}`);
    if (options.detailed) {
        // Detaylı screen analizi
        if (stats.screens.length > 0) {
            console.log("\n📱 Screen Analysis:");
            const sortedScreens = [...stats.screens].sort((a, b) => b.lines - a.lines);
            sortedScreens.slice(0, 5).forEach((screen) => {
                const sizeKB = (screen.size / 1024).toFixed(2);
                console.log(`   📄 ${screen.relativePath} (${screen.lines} lines, ${sizeKB} KB, complexity: ${screen.complexity})`);
            });
        }
        // Detaylı component analizi
        if (stats.components.length > 0) {
            console.log("\n🧩 Component Analysis:");
            const sortedComponents = [...stats.components].sort((a, b) => b.complexity - a.complexity);
            sortedComponents.slice(0, 5).forEach((component) => {
                const sizeKB = (component.size / 1024).toFixed(2);
                console.log(`   📄 ${component.relativePath} (${component.lines} lines, ${sizeKB} KB, complexity: ${component.complexity})`);
            });
        }
        // Kullanılmayan dosyalar
        if (stats.unusedFiles.length > 0) {
            console.log("\n🗑️  Unused Files:");
            stats.unusedFiles.forEach((file) => {
                console.log(`   📄 ${file}`);
            });
        }
    }
    // Code quality analizi
    console.log("\n🛠️  Code Quality:");
    const highComplexityComponents = stats.components.filter((f) => f.complexity > 10);
    const largeScreens = stats.screens.filter((f) => f.lines > 200);
    const unusedPercentage = (stats.unusedFiles.length / stats.totalFiles) * 100;
    console.log(`   ⚠️  High complexity components: ${highComplexityComponents.length}`);
    console.log(`   📏 Large screens (>200 lines): ${largeScreens.length}`);
    console.log(`   🗑️  Unused code: ${unusedPercentage.toFixed(1)}%`);
    // Öneriler
    if (stats.recommendations.length > 0) {
        console.log("\n💡 Recommendations:");
        stats.recommendations.forEach((rec, index) => {
            console.log(`   ${index + 1}. ${rec}`);
        });
    }
    // Architecture Analizi
    if (stats.architecture) {
        console.log("\n🏗️ Architecture Analysis:");
        console.log(`   📁 Folder Structure: ${stats.architecture.folderStructure.score}/100`);
        console.log(`   📝 Naming Conventions: ${stats.architecture.namingConventions.score}/100`);
        console.log(`   🧩 Component Hierarchy: Max depth ${stats.architecture.componentHierarchy.maxDepth}`);
        console.log(`   🔄 State Management: ${stats.architecture.stateManagement.patterns.join(", ") ||
            "None detected"}`);
        if (stats.architecture.folderStructure.issues.length > 0) {
            console.log("   ⚠️ Folder Issues:");
            stats.architecture.folderStructure.issues
                .slice(0, 3)
                .forEach((issue) => console.log(`      • ${issue}`));
        }
    }
    // Testing Analizi
    if (stats.testing) {
        console.log("\n🧪 Testing Analysis:");
        console.log(`   📊 Coverage: ${stats.testing.coverage.coveragePercentage}% (${stats.testing.coverage.testedFiles}/${stats.testing.coverage.totalFiles} files)`);
        console.log(`   🎯 Test Quality: ${stats.testing.testQuality.score}/100`);
        console.log(`   🛠️ Frameworks: ${stats.testing.testPatterns.frameworks.join(", ") || "None detected"}`);
        if (stats.testing.coverage.missingTests.length > 0) {
            console.log("   ❌ Missing Tests:");
            stats.testing.coverage.missingTests
                .slice(0, 3)
                .forEach((test) => console.log(`      • ${test}`));
        }
    }
    // Security Analizi
    if (stats.security) {
        console.log("\n🔒 Security Analysis:");
        console.log(`   📦 Vulnerable Packages: ${stats.security.dependencies.vulnerablePackages.length}`);
        console.log(`   🔑 Hardcoded Secrets: ${stats.security.codeSecurity.hardcodedSecrets.length}`);
        console.log(`   🌐 API Endpoints: ${stats.security.apiSecurity.endpoints.length}`);
        console.log(`   ✅ Input Validation: ${stats.security.inputValidation.missingValidation.length} missing`);
        if (stats.security.codeSecurity.hardcodedSecrets.length > 0) {
            console.log("   ⚠️ Security Issues:");
            stats.security.codeSecurity.hardcodedSecrets
                .slice(0, 2)
                .forEach((secret) => console.log(`      • ${secret}`));
        }
    }
};
// HTML raporu oluştur
const generateHTMLReport = (stats) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25;
    const html = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Project Analysis Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; text-align: center; }
        .section { margin: 20px 0; padding: 15px; border-left: 4px solid #007AFF; background: #f8f9fa; }
        .metric { display: inline-block; margin: 10px; padding: 10px; background: #e9ecef; border-radius: 4px; }
        .score { font-size: 24px; font-weight: bold; }
        .excellent { color: #28a745; }
        .good { color: #ffc107; }
        .fair { color: #fd7e14; }
        .poor { color: #dc3545; }
        .file-list { list-style: none; padding: 0; }
        .file-list li { padding: 5px 0; border-bottom: 1px solid #eee; }
        .recommendations { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 4px; }
        .analysis-section { margin: 25px 0; padding: 20px; border-left: 4px solid #28a745; background: #f8fff8; }
        .analysis-section h3 { color: #28a745; margin-top: 0; }
        .sub-metric { margin: 8px 0; padding: 8px; background: #e8f5e8; border-radius: 4px; }
        .warning { color: #dc3545; }
        .success { color: #28a745; }
        .info { color: #007AFF; }
        .error-section { margin: 15px 0; padding: 12px; background: #fff5f5; border-left: 4px solid #dc3545; border-radius: 4px; }
        .warning-section { margin: 15px 0; padding: 12px; background: #fffbf0; border-left: 4px solid #ffc107; border-radius: 4px; }
        .info-section { margin: 15px 0; padding: 12px; background: #f0f8ff; border-left: 4px solid #007AFF; border-radius: 4px; }
        .error-title { color: #dc3545; font-weight: bold; margin-bottom: 8px; }
        .warning-title { color: #ffc107; font-weight: bold; margin-bottom: 8px; }
        .info-title { color: #007AFF; font-weight: bold; margin-bottom: 8px; }
        .tree-structure { font-family: 'Courier New', monospace; font-size: 15px; line-height: 1.6; background: #f8f9fa; padding: 15px; border-radius: 6px; border: 1px solid #e9ecef; }
        .tree-folder { color: #007AFF; font-weight: bold; margin: 8px 0 4px 0; font-size: 16px; }
        .tree-file { color: #333; margin: 2px 0; font-weight: 600; }
        .tree-screen { color: #28a745; margin: 2px 0; font-weight: 600; }
        .tree-component { color: #ffc107; margin: 2px 0; font-weight: 600; }
        .tree-hook { color: #fd7e14; margin: 2px 0; font-weight: 600; }
        .tree-util { color: #6f42c1; margin: 2px 0; font-weight: 600; }
        .tree-unused { color: #dc3545; margin: 2px 0; font-weight: 600; }
    </style>
</head>
<body>
    <div class="container">
        <h1>📊 Project Analysis Report</h1>
        
        <!-- Project Overview -->
        <div class="analysis-section">
            <h3>🏗️ Project Overview</h3>
            <div class="sub-metric">📁 Total files: <strong>${stats.totalFiles}</strong></div>
            <div class="sub-metric">📝 Total lines: <strong>${stats.totalLines.toLocaleString()}</strong></div>
            <div class="sub-metric">💾 Total size: <strong>${(stats.totalSize / 1024).toFixed(2)} KB</strong></div>
        </div>
        
        <!-- File Distribution -->
        <div class="analysis-section">
            <h3>📂 File Distribution</h3>
            <div class="sub-metric">📱 Screens: <strong>${stats.screens.length}</strong></div>
            <div class="sub-metric">🧩 Components: <strong>${stats.components.length}</strong></div>
            <div class="sub-metric">🪝 Hooks: <strong>${stats.hooks.length}</strong></div>
            <div class="sub-metric">🛠️ Utils: <strong>${stats.utils.length}</strong></div>
            <div class="sub-metric">📄 Others: <strong>${stats.others.length}</strong></div>
            
            <div class="info-section">
                <div class="info-title">🌳 Project Structure:</div>
                <div class="tree-structure">${generateProjectTree(stats)}</div>
            </div>
        </div>
        
        <!-- Code Quality -->
        <div class="analysis-section">
            <h3>🛠️ Code Quality</h3>
            <div class="sub-metric">⚠️ High complexity components: <strong>${stats.components.filter((f) => f.complexity > 10).length}</strong></div>
            <div class="sub-metric">📏 Large screens (>200 lines): <strong>${stats.screens.filter((f) => f.lines > 200).length}</strong></div>
            <div class="sub-metric">🗑️ Unused code: <strong>${((stats.unusedFiles.length / stats.totalFiles) *
        100).toFixed(1)}%</strong></div>
            ${stats.components.filter((f) => f.complexity > 10).length > 0
        ? `
            <div class="warning-section">
                <div class="warning-title">⚠️ High Complexity Components:</div>
                <ul class="file-list">${stats.components
            .filter((f) => f.complexity > 10)
            .map((comp) => `<li>• ${comp.relativePath} (complexity: ${comp.complexity})</li>`)
            .join("")}</ul>
            </div>`
        : ""}
            ${stats.screens.filter((f) => f.lines > 200).length > 0
        ? `
            <div class="warning-section">
                <div class="warning-title">⚠️ Large Screens:</div>
                <ul class="file-list">${stats.screens
            .filter((f) => f.lines > 200)
            .map((screen) => `<li>• ${screen.relativePath} (${screen.lines} lines)</li>`)
            .join("")}</ul>
            </div>`
        : ""}
        </div>
        

        
                
        
        <!-- Architecture Analysis -->
        <div class="analysis-section">
            <h3>🏗️ Architecture Analysis</h3>
            <div class="sub-metric">📁 Folder Structure: <strong>${((_b = (_a = stats.architecture) === null || _a === void 0 ? void 0 : _a.folderStructure) === null || _b === void 0 ? void 0 : _b.score) || 0}/100</strong></div>
            <div class="sub-metric">📝 Naming Conventions: <strong>${((_d = (_c = stats.architecture) === null || _c === void 0 ? void 0 : _c.namingConventions) === null || _d === void 0 ? void 0 : _d.score) || 0}/100</strong></div>
            <div class="sub-metric">🧩 Component Hierarchy: Max depth <strong>${((_f = (_e = stats.architecture) === null || _e === void 0 ? void 0 : _e.componentHierarchy) === null || _f === void 0 ? void 0 : _f.maxDepth) || 0}</strong></div>
            <div class="sub-metric">🔄 State Management: <strong>${((_j = (_h = (_g = stats.architecture) === null || _g === void 0 ? void 0 : _g.stateManagement) === null || _h === void 0 ? void 0 : _h.patterns) === null || _j === void 0 ? void 0 : _j.join(", ")) ||
        "None detected"}</strong></div>
            ${((_l = (_k = stats.architecture) === null || _k === void 0 ? void 0 : _k.folderStructure) === null || _l === void 0 ? void 0 : _l.issues) &&
        stats.architecture.folderStructure.issues.length > 0
        ? `
            <div class="warning-section">
                <div class="warning-title">⚠️ Folder Structure Issues:</div>
                <ul class="file-list">${stats.architecture.folderStructure.issues
            .map((issue) => `<li>• ${issue}</li>`)
            .join("")}</ul>
            </div>`
        : ""}
            ${((_o = (_m = stats.architecture) === null || _m === void 0 ? void 0 : _m.namingConventions) === null || _o === void 0 ? void 0 : _o.violations) &&
        stats.architecture.namingConventions.violations.length > 0
        ? `
            <div class="warning-section">
                <div class="warning-title">⚠️ Naming Convention Violations:</div>
                <ul class="file-list">${stats.architecture.namingConventions.violations
            .map((violation) => `<li>• ${violation}</li>`)
            .join("")}</ul>
            </div>`
        : ""}
            ${((_q = (_p = stats.architecture) === null || _p === void 0 ? void 0 : _p.folderStructure) === null || _q === void 0 ? void 0 : _q.recommendations) &&
        stats.architecture.folderStructure.recommendations.length > 0
        ? `
            <div class="recommendations">
                <h4>Architecture Recommendations:</h4>
                <ul>${stats.architecture.folderStructure.recommendations
            .map((rec) => `<li>${rec}</li>`)
            .join("")}</ul>
            </div>`
        : ""}
        </div>
        
                <!-- Testing Analysis -->
        <div class="analysis-section">
            <h3>🧪 Testing Analysis</h3>
            <div class="sub-metric">📊 Coverage: <strong>${((_s = (_r = stats.testing) === null || _r === void 0 ? void 0 : _r.coverage) === null || _s === void 0 ? void 0 : _s.coveragePercentage) || 0}%</strong> (${((_u = (_t = stats.testing) === null || _t === void 0 ? void 0 : _t.coverage) === null || _u === void 0 ? void 0 : _u.testedFiles) || 0}/${((_w = (_v = stats.testing) === null || _v === void 0 ? void 0 : _v.coverage) === null || _w === void 0 ? void 0 : _w.totalFiles) || 0} files)</div>
            <div class="sub-metric">🎯 Test Quality: <strong>${((_y = (_x = stats.testing) === null || _x === void 0 ? void 0 : _x.testQuality) === null || _y === void 0 ? void 0 : _y.score) || 0}/100</strong></div>
            <div class="sub-metric">🛠️ Frameworks: <strong>${((_1 = (_0 = (_z = stats.testing) === null || _z === void 0 ? void 0 : _z.testPatterns) === null || _0 === void 0 ? void 0 : _0.frameworks) === null || _1 === void 0 ? void 0 : _1.join(", ")) ||
        "None detected"}</strong></div>
            ${((_3 = (_2 = stats.testing) === null || _2 === void 0 ? void 0 : _2.coverage) === null || _3 === void 0 ? void 0 : _3.missingTests) &&
        stats.testing.coverage.missingTests.length > 0
        ? `
            <div class="warning-section">
                <div class="warning-title">⚠️ Missing Tests:</div>
                <ul class="file-list">${stats.testing.coverage.missingTests
            .map((test) => `<li>• ${test}</li>`)
            .join("")}</ul>
            </div>`
        : ""}
            ${((_5 = (_4 = stats.testing) === null || _4 === void 0 ? void 0 : _4.coverage) === null || _5 === void 0 ? void 0 : _5.recommendations) &&
        stats.testing.coverage.recommendations.length > 0
        ? `
            <div class="recommendations">
                <h4>Testing Recommendations:</h4>
                <ul>${stats.testing.coverage.recommendations
            .map((rec) => `<li>${rec}</li>`)
            .join("")}</ul>
            </div>`
        : ""}
        </div>
        
        <!-- Security Analysis -->
        <div class="analysis-section">
            <h3>🔒 Security Analysis</h3>
            <div class="sub-metric">📦 Vulnerable Packages: <strong>${((_8 = (_7 = (_6 = stats.security) === null || _6 === void 0 ? void 0 : _6.dependencies) === null || _7 === void 0 ? void 0 : _7.vulnerablePackages) === null || _8 === void 0 ? void 0 : _8.length) || 0}</strong></div>
            <div class="sub-metric">🔑 Hardcoded Secrets: <strong>${((_11 = (_10 = (_9 = stats.security) === null || _9 === void 0 ? void 0 : _9.codeSecurity) === null || _10 === void 0 ? void 0 : _10.hardcodedSecrets) === null || _11 === void 0 ? void 0 : _11.length) || 0}</strong></div>
            <div class="sub-metric">🌐 API Endpoints: <strong>${((_14 = (_13 = (_12 = stats.security) === null || _12 === void 0 ? void 0 : _12.apiSecurity) === null || _13 === void 0 ? void 0 : _13.endpoints) === null || _14 === void 0 ? void 0 : _14.length) || 0}</strong></div>
            <div class="sub-metric">✅ Input Validation: <strong>${((_17 = (_16 = (_15 = stats.security) === null || _15 === void 0 ? void 0 : _15.inputValidation) === null || _16 === void 0 ? void 0 : _16.missingValidation) === null || _17 === void 0 ? void 0 : _17.length) || 0}</strong> missing</div>
            ${((_19 = (_18 = stats.security) === null || _18 === void 0 ? void 0 : _18.dependencies) === null || _19 === void 0 ? void 0 : _19.vulnerablePackages) &&
        stats.security.dependencies.vulnerablePackages.length > 0
        ? `
            <div class="error-section">
                <div class="error-title">❌ Vulnerable Packages:</div>
                <ul class="file-list">${stats.security.dependencies.vulnerablePackages
            .map((pkg) => `<li>• ${pkg}</li>`)
            .join("")}</ul>
            </div>`
        : ""}
            ${((_21 = (_20 = stats.security) === null || _20 === void 0 ? void 0 : _20.codeSecurity) === null || _21 === void 0 ? void 0 : _21.hardcodedSecrets) &&
        stats.security.codeSecurity.hardcodedSecrets.length > 0
        ? `
            <div class="error-section">
                <div class="error-title">❌ Hardcoded Secrets:</div>
                <ul class="file-list">${stats.security.codeSecurity.hardcodedSecrets
            .map((secret) => `<li>• ${secret}</li>`)
            .join("")}</ul>
            </div>`
        : ""}
            ${((_23 = (_22 = stats.security) === null || _22 === void 0 ? void 0 : _22.apiSecurity) === null || _23 === void 0 ? void 0 : _23.issues) &&
        stats.security.apiSecurity.issues.length > 0
        ? `
            <div class="error-section">
                <div class="error-title">❌ API Security Issues:</div>
                <ul class="file-list">${stats.security.apiSecurity.issues
            .map((issue) => `<li>• ${issue}</li>`)
            .join("")}</ul>
            </div>`
        : ""}
            ${((_25 = (_24 = stats.security) === null || _24 === void 0 ? void 0 : _24.dependencies) === null || _25 === void 0 ? void 0 : _25.recommendations) &&
        stats.security.dependencies.recommendations.length > 0
        ? `
            <div class="recommendations">
                <h4>Security Recommendations:</h4>
                <ul>${stats.security.dependencies.recommendations
            .map((rec) => `<li>${rec}</li>`)
            .join("")}</ul>
            </div>`
        : ""}
        </div>
        

        
        ${stats.recommendations.length > 0
        ? `
        <!-- General Recommendations -->
        <div class="analysis-section">
            <h3>💡 General Recommendations</h3>
            <ul class="file-list">${stats.recommendations
            .map((rec) => `<li>• ${rec}</li>`)
            .join("")}</ul>
        </div>`
        : ""}
        
        ${stats.unusedFiles.length > 0
        ? `
        <!-- Unused Files -->
        <div class="info-section">
            <div class="info-title">🗑️ Unused Files</div>
            <ul class="file-list">${stats.unusedFiles
            .map((file) => `<li>📄 ${file}</li>`)
            .join("")}</ul>
        </div>`
        : ""}
        
        <!-- Disclaimer -->
        <div style="margin-top: 40px; padding: 20px; background: #f8f9fa; border-top: 2px solid #e9ecef; text-align: center; color: #6c757d; font-size: 12px; font-style: italic;">
            <p>⚠️ This report was generated by Kedy CLI tool. Analysis results may contain errors or inaccuracies. Use at your own risk.</p>
            <p>📄 Generated on: ${new Date().toLocaleString()}</p>
        </div>
    </div>
</body>
</html>`;
    const fs = require("fs");
    fs.writeFileSync("project-analysis-report.html", html);
    console.log("📄 HTML report saved as: project-analysis-report.html");
};
// Skor sınıfını belirle
const getScoreClass = (score) => {
    if (score >= 80)
        return "excellent";
    if (score >= 60)
        return "good";
    if (score >= 40)
        return "fair";
    return "poor";
};
// Skor açıklamasını belirle
const getScoreDescription = (score) => {
    if (score >= 80)
        return "Your project is well-optimized!";
    if (score >= 60)
        return "Some improvements can be made.";
    if (score >= 40)
        return "Consider implementing the recommendations.";
    return "Significant improvements needed.";
};
// JSON için proje yapısı oluştur
const generateProjectStructure = (stats) => {
    const allFiles = [
        ...stats.screens,
        ...stats.components,
        ...stats.hooks,
        ...stats.utils,
        ...stats.others,
    ];
    // Dosyaları klasörlere göre grupla
    const folderStructure = {};
    allFiles.forEach((file) => {
        const pathParts = file.relativePath.split("/");
        const folder = pathParts.slice(0, -1).join("/");
        const fileName = pathParts[pathParts.length - 1];
        if (!folderStructure[folder]) {
            folderStructure[folder] = [];
        }
        folderStructure[folder].push({
            name: fileName,
            type: file.type,
            isUnused: stats.unusedFiles.includes(file.relativePath),
            size: file.size,
            lines: file.lines,
            complexity: file.complexity,
            relativePath: file.relativePath,
        });
    });
    // Klasörleri sırala ve JSON formatında döndür
    const sortedFolders = Object.keys(folderStructure).sort();
    const structure = {};
    sortedFolders.forEach((folder) => {
        const sortedFiles = folderStructure[folder].sort((a, b) => a.name.localeCompare(b.name));
        structure[folder] = sortedFiles;
    });
    return structure;
};
// HTML için proje ağacı oluştur
const generateProjectTree = (stats) => {
    const allFiles = [
        ...stats.screens,
        ...stats.components,
        ...stats.hooks,
        ...stats.utils,
        ...stats.others,
    ];
    // Dosyaları klasörlere göre grupla
    const folderStructure = {};
    allFiles.forEach((file) => {
        const pathParts = file.relativePath.split("/");
        const folder = pathParts.slice(0, -1).join("/");
        const fileName = pathParts[pathParts.length - 1];
        if (!folderStructure[folder]) {
            folderStructure[folder] = [];
        }
        folderStructure[folder].push({
            name: fileName,
            type: file.type,
            isUnused: stats.unusedFiles.includes(file.relativePath),
        });
    });
    let tree = "";
    // Ana klasörleri sırala
    const sortedFolders = Object.keys(folderStructure).sort();
    sortedFolders.forEach((folder, folderIndex) => {
        // Klasör adını göster
        tree += `<div class="tree-folder">📁 ${folder}/</div>`;
        // Klasör içindeki dosyaları sırala
        const sortedFiles = folderStructure[folder].sort((a, b) => a.name.localeCompare(b.name));
        sortedFiles.forEach((file, fileIndex) => {
            const isLastFile = fileIndex === sortedFiles.length - 1;
            // Tree çizgileri - daha basit ve temiz
            const connector = isLastFile ? "└── " : "├── ";
            // Dosya türüne göre icon ve renk sınıfı
            let icon = "📄";
            let colorClass = "tree-file";
            switch (file.type) {
                case "screen":
                    icon = "📱";
                    colorClass = "tree-screen";
                    break;
                case "component":
                    icon = "🧩";
                    colorClass = "tree-component";
                    break;
                case "hook":
                    icon = "🪝";
                    colorClass = "tree-hook";
                    break;
                case "util":
                    icon = "🛠️";
                    colorClass = "tree-util";
                    break;
                default:
                    icon = "📄";
                    colorClass = "tree-file";
            }
            // Unused dosyalar için sadece renk değişikliği (üstü çizili değil)
            if (file.isUnused) {
                colorClass = "tree-unused";
            }
            tree += `<div class="${colorClass}">    ${connector}${icon} ${file.name}</div>`;
        });
    });
    return tree;
};
